// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Generates unit tests for a given code snippet and provides coverage reports.
 *
 * - generateUnitTests - A function that generates unit tests for a given code snippet.
 * - GenerateUnitTestsInput - The input type for the generateUnitTests function.
 * - GenerateUnitTestsOutput - The return type for the generateUnitTests function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateUnitTestsInputSchema = z.object({
  code: z
    .string()
    .describe('The code snippet for which unit tests need to be generated.'),
  language: z
    .string()
    .describe('The programming language of the code snippet.'),
});

export type GenerateUnitTestsInput = z.infer<typeof GenerateUnitTestsInputSchema>;

const GenerateUnitTestsOutputSchema = z.object({
  tests: z.string().describe('The generated unit tests for the code snippet.'),
  coverageReport: z
    .string()
    .describe('The coverage report for the generated unit tests.'),
  coverageChanges: z
    .string()
    .describe(
      'A description of the coverage changes after applying a fix to the code.'
    ),
});

export type GenerateUnitTestsOutput = z.infer<typeof GenerateUnitTestsOutputSchema>;

export async function generateUnitTests(input: GenerateUnitTestsInput): Promise<GenerateUnitTestsOutput> {
  return generateUnitTestsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateUnitTestsPrompt',
  input: {schema: GenerateUnitTestsInputSchema},
  output: {schema: GenerateUnitTestsOutputSchema},
  prompt: `You are a unit test generator. You will generate unit tests for the given code snippet in the specified language, and generate a coverage report.

Code:
{{code}}

Language:
{{language}}

Tests:
{{tests}}
Coverage Report:
{{coverageReport}}
Coverage Changes:
{{coverageChanges}}`,
});

const generateUnitTestsFlow = ai.defineFlow(
  {
    name: 'generateUnitTestsFlow',
    inputSchema: GenerateUnitTestsInputSchema,
    outputSchema: GenerateUnitTestsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
